GRAVISHOT

-multiplayer first person shooter
-in space
-small asteroids (any mesh should work) - they cause gravity - attract players and bullets/shots
    -their gravity is unrealisticaly huge when taking into acount their size and mass
    -they are stationary - they are part of the map
-players can move in space by walking on asteroids and jumping from one to another
    -maybe player has "magnetic" boots and sticks to surfaces he walks on
-when the player shoots then the action-reaction law applies (3rd law of motion) - the player can use this as propulsion and fly in free space
    -when the player stands on a surface (asteroid) then this effect is (much) smaller
    -shooting with a high caliber gun (or high fire rate) when in free space can be bad - can easily reach escape velocity of asteroids and never get atracted back to them (eventualy hitting the edge of the map and getting killed by it)
-player can throw special gravity grenades (as well as the conventional ones), possibly gravity mines
    -they also cause gravity and can deflect (nearby) bullets/other shots and players
    -the enemy would have to compensate their shots to counteract the additional gravity
    -maybe gravity grenades after explosion become stationary (probably causes less chaos)
        -or they have action-reaction law applied between them and the player (probably a lot of chaos)
        -or they dont have action-reaction but can be atracted by asteroids
-bullets are not that fast or gravity has much higher effect on them - such that the gravitational effect (of asteroids) is more visible

anti-cheat ideas
-client does not know the exact gravity field -> aimbot can not precisely calculate the shot
    -bad side-effect: the server has to constantly send the coordinates of every shot (or corections) to make it possible to see them
    -requires that the map is randomly generated or unknown to the players
-server owners can choose their anticheat technique - banning (name,IP,ID,etc...)
                                                    - automatic anticheat
                                                    - their own implementation (they can edit the source code and recompile)

-map can be made,saved,loaded -> comunity maps
-mods? - anyone can edit source code and recompile

player damage
-headshot (helmet) - instant kill
-bodyshot (space suit) - does damage to player + damage to the space suit -> air leaks out -> has to be repaired with a tape or player suffocates
    -anyone can patch the hole in the space suit
    -when the hole is on the back then the shot player can not see it and can not repair it -> other player has to path it

infrastructure
central server - coordinates clients and simulates the world, checks rules, decides player damage
clients - they have 3 components:
    local world - simulates localy for GUI and for minimizing bandwidth
    Client connection - comunicates with the server (syncs local world with it)
    GUI interface - displays local world and handles input

run:
gravishot.exe
    opens a window with menu: join server, start server
    join server: enter IP:port -> connects to server and downloads map, assets ...
        then menu with "choose a name" and spawn, (maybe choose team?)
    start server: enter port, map file, other config ..., press start
        -> window changes: join local apppears -> can join the server within the same window (same instance)

gravishot.exe --server --port 1234 --map my_map.map --some_other_config (etc ...)
    only console appears and server starts with specified options

gravishot.exe --connect 123.100.10.5:1234 --name MyPlayerName (etc ...)
    connects to specified server and opens game window



map files:
rust dynamic library with certain interface (setup_world, update, etc ...)
a simple one could just load a .gltf file and pass it to the game
more complex one could handle complex logic, generate the map, special effects etc...


relativity and time dilation (optional config):
gravity (potentialy also fast speeds - lower max speed of light) causes time dilation, affects their ticking (reload speed, health regen speed, movement?,...)
every player has its time speed, player can see their clock on the screen,
global time speed exists, is adjusted such that the player with the smallest and largest time dilation have average effects, the player with the average dilation will see their clock to tick the normal speed (1 tick/s)
global time speed is applied to every object and process
player with the biggest time dilation sees their clock to tick the slowest, if the player goes further into stronger field then it will slow down more and eventualy the player will "freeze" in time (and "die") as the universe around them speeds up infinitely (only in an animation, no user controls and movement at this stage)
when the player is getting slower then controlls are getting less sensitive (slower mouse aiming) and all player ticks are slowed (reload time, shooting speed)
player with the smallest time dilation sees their clock to tick the fastest, if they get even smaller time dilation then will speed up even more and when they get over threshold they will "die" as the universe around them slows down to a stop
when the player is getting faster then controlls are getting more sensitive (its harder to aim precisely bacause of it) and it gets harder to move as the player wishes
time dilation boundaries are used such that the players can not get too far apart in the time dilation sense, its not good when one player is too fast and the other too slow, they will have to move "together" in the time dilation way
-the map can maybe have black hole in the center and the asteroids orbiting around, the black hole causes huge gravity and time dilation


networking
-authoritative server - server stores the main copy of the world state and resends it to clients and checks that clients are not performing invalid moves or cheats
-backrolling on server and client - when update is received for past event then the past is updated and replayed
-every few frames the player sends a summary of its state (Transform,Velocity,...) with the current frame # to the server to check and sync
-when client receives input from the player (keyboard or mouse) it will send updated data which changed because of the input as well as the current frame # to the server
-when the server receives update from a client it will compare it with its own copy of the player (client) state and update its state when appropriate (the player movement is ok) or instead send its current state to the player to sync (example: the client is cheating or lagging behind), also when update happens server will resend to other clients
-the server will also resend summaries of all the clients to all the clients every few frames